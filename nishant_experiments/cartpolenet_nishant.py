# -*- coding: utf-8 -*-
"""CartpoleNet_nishant.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E6ZY2qJeFhed0sUPYvToYDlSAWnljjhf
"""

!unzip dataset.zip

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

class CartpoleNet(nn.Module):

  def __init__(self):
    super(CartpoleNet, self).__init__()
    # 6 output channels, 3x3 square convolution
    self.conv1 = nn.Conv3d(num_channels, 6, 3)
    self.fc1 = nn.Linear(6 * 63 * 63, 100)
    self.fc2 = nn.Linear(100, 50)
    self.fc3 = nn.Linear(50, 20)
    self.fc4 = nn.Linear(20, 4)
    self.JHist = []

  def forward(self, x):
    # Max pooling over a (2, 2, 2) window
    x = F.max_pool3d(F.relu(self.conv1(x)), 2)
    x = x.view(-1, self.num_flat_features(x))
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = F.relu(self.fc3(x))
    x = self.fc4(x)
    return x

  def num_flat_features(self, x):
    size = x.size()[1:]  # all dimensions except the batch dimension
    num_features = 1
    for s in size:
      num_features *= s
    return num_features

# images_per_set = 5
# num_samples = 10
# num_channels = 1

# net = CartpoleNet()
# print(net)
# input = torch.randn(num_samples, num_channels, images_per_set, 128, 128)
# out = net(input)
# print(out)

if __name__ == '__main__':
  from dataloader import CartpoleDataset
  import numpy as np

  # NUM_EPOCHS = 220
  NUM_EPOCHS = 100
  LEARNING_RATE = 0.0001
  E = 50  # epoch length
  n = 5  # images per set
  W = 128  # image width
  H = 128  # image height
  grayscale = True

  if not grayscale:
    num_channels = 3
  else:
    num_channels = 1

  net = CartpoleNet().float()
  full_dataset = CartpoleDataset('data.csv', './image_dataset/', n, grayscale=grayscale)

  epoch_loss = 0

  for epoch in range(NUM_EPOCHS):
    print("Epoch {}".format(epoch))
    e = epoch * 50  # current epoch beginning index
    current_epoch_imageset = torch.empty(E-n+1, num_channels, n, W, H)
    current_epoch_labelset = torch.empty(E-n+1, 4)
    for i in range(e+n-2, e+E-2):
      k = i-(e+n-2)
      current_epoch_imageset[k, :] = full_dataset[i][0]
      current_epoch_labelset[k] = torch.from_numpy(full_dataset[i][1][n-2])
    
    criterion = nn.MSELoss()
    optimizer = optim.SGD(net.parameters(), lr=LEARNING_RATE)

    optimizer.zero_grad()

    pred_labelset = net(current_epoch_imageset)

    loss = criterion(pred_labelset, current_epoch_labelset)
    loss.backward()
    optimizer.step()

    epoch_loss += loss.item()
    net.JHist.append(epoch_loss)

import matplotlib.pyplot as plt

plt.plot(np.linspace(0, NUM_EPOCHS-1, NUM_EPOCHS), net.JHist)
print(net.JHist)
plt.ylabel("Cost error")
plt.xlabel("epoch")
plt.grid()
plt.show()

with torch.no_grad():
  criterion = nn.MSELoss()
  pred_labels = net(torch.randn(10, num_channels, n, H, W))

PATH = './CartpoleNet_nishant.pth'
torch.save(net.state_dict(), PATH)